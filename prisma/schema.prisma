// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  uid                 String   @id @default(uuid())
  id                  String   @unique
  role                String
  password            String
  needsPasswordChange Boolean
  passwordChangeAt    DateTime
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  facultyId           String?
  faculty             Faculty? @relation(fields: [facultyId], references: [id])
  studentId           String?
  student             Student? @relation(fields: [studentId], references: [id])
  adminId             String?
  admin               Admin?   @relation(fields: [adminId], references: [id])

  @@map("users")
}

model AcademicSemester {
  id         String    @id @default(uuid())
  title      String
  year       String
  code       String
  startMonth String
  endMonth   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Student    Student[]

  @@map("academic_semesters")
}

model AcademicFaculty {
  id                  String               @id @default(uuid())
  title               String
  createAt            DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  academicDepartments AcademicDepartment[]
  Student             Student[]

  @@map("academic_faculties")
}

model AcademicDepartment {
  id                String          @id @default(uuid())
  title             String
  academicFacultyId String
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  Student           Student[]

  @@map("academic_departments")
}

model Student {
  id                   String             @id @map(name: "id")
  nameId               String
  name                 Name               @relation(fields: [nameId], references: [id])
  gender               String?
  dateOfBirth          String?
  email                String             @unique
  contactNo            String             @unique
  emergencyContactNo   String
  bloodGroup           String?
  presentAddress       String
  permanentAddress     String
  guardianId           String
  guardian             Guardian           @relation(fields: [guardianId], references: [id])
  localGuardianId      String
  localGuardian        LocalGuardian      @relation(fields: [localGuardianId], references: [id])
  academicFaculty      AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId    String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String
  academicSemester     AcademicSemester   @relation(fields: [academicSemesterId], references: [id])
  academicSemesterId   String
  profileImage         String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  users                User[]

  @@map("students")
}

model Name {
  id         String    @id @default(uuid())
  firstName  String
  lastName   String
  middleName String?
  students   Student[]

  @@map("names")
}

model Guardian {
  id               String    @id @default(uuid())
  fatherName       String
  fatherOccupation String
  fatherContactNo  String
  motherName       String
  motherOccupation String
  motherContactNo  String
  address          String
  students         Student[]

  @@map("guardians")
}

model LocalGuardian {
  id         String    @id @default(uuid())
  name       String
  occupation String
  contactNo  String
  address    String
  students   Student[]

  @@map("local_guardians")
}

model Faculty {
  id    String @id @default(uuid())
  users User[]

  @@map("faculties")
}

model Admin {
  id    String @id @default(uuid())
  users User[]

  @@map("admins")
}
