generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  uid                 String    @id @default(uuid())
  id                  String    @unique
  role                String
  password            String
  needsPasswordChange Boolean?  @default(true)
  passwordChangeAt    DateTime? @default(now())
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  facultyId           String?
  faculty             Faculty?  @relation(fields: [facultyId], references: [id])
  studentId           String?
  student             Student?  @relation(fields: [studentId], references: [uid])
  adminId             String?
  admin               Admin?    @relation(fields: [adminId], references: [id])

  @@map("users")
}

model AcademicSemester {
  id         String    @id @default(uuid())
  title      String
  year       String
  code       String
  startMonth String
  endMonth   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Student    Student[]

  @@map("academic_semesters")
}

model AcademicFaculty {
  id                  String               @id @default(uuid())
  title               String
  createAt            DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  academicDepartments AcademicDepartment[]
  Student             Student[]
  faculties           Faculty[]

  @@map("academic_faculties")
}

model AcademicDepartment {
  id                String          @id @default(uuid())
  title             String
  academicFacultyId String
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  Student           Student[]
  faculties         Faculty[]

  @@map("academic_departments")
}

model Student {
  uid                  String             @id @default(uuid())
  id                   String             @unique
  nameId               String
  name                 Name               @relation(fields: [nameId], references: [id])
  gender               String?
  dateOfBirth          String?
  email                String             @unique
  contactNo            String             @unique
  emergencyContactNo   String
  bloodGroup           String?
  presentAddress       String
  permanentAddress     String
  guardianId           String
  guardian             Guardian           @relation(fields: [guardianId], references: [id])
  localGuardianId      String
  localGuardian        LocalGuardian      @relation(fields: [localGuardianId], references: [id])
  academicFaculty      AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId    String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String
  academicSemester     AcademicSemester   @relation(fields: [academicSemesterId], references: [id])
  academicSemesterId   String
  profileImage         String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  users                User[]

  @@map("students")
}

model Faculty {
  uid                  String             @id @default(uuid())
  id                   String             @unique
  nameId               String
  name                 Name               @relation(fields: [nameId], references: [id])
  dateOfBirth          String?
  gender               String?
  bloodGroup           String?
  email                String             @unique
  contactNo            String             @unique
  emergencyContactNo   String
  presentAddress       String
  permanentAddress     String
  academicDepartmentId String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  designation          String
  profileImage         String?
  academicFacultyId    String
  academicFaculty      AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  users                User[]

  @@map("faculties")
}

model Name {
  id         String    @id @default(uuid())
  firstName  String
  lastName   String
  middleName String?
  students   Student[]
  faculties  Faculty[]

  @@map("names")
}

model Guardian {
  id               String    @id @default(uuid())
  fatherName       String
  fatherOccupation String
  fatherContactNo  String
  motherName       String
  motherOccupation String
  motherContactNo  String
  address          String
  students         Student[]

  @@map("guardians")
}

model LocalGuardian {
  id         String    @id @default(uuid())
  name       String
  occupation String
  contactNo  String
  address    String
  students   Student[]

  @@map("local_guardians")
}

model Admin {
  id    String @id @default(uuid())
  users User[]

  @@map("admins")
}

model ListingStatus {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("listing_statuses")
}

model PropertyType {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("property_types")
}

model Country {
  id        String   @id @default(uuid())
  title     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cities    City[]

  @@map("countries")
}

model City {
  id                String            @id @default(uuid())
  title             String            @unique
  countryId         String
  country           Country           @relation(fields: [countryId], references: [id])
  propertyAddresses PropertyAddress[]

  @@map("cities")
}

model Coordinate {
  id                String            @id @default(uuid())
  lattitude         Float
  longitude         Float
  propertyAddresses PropertyAddress[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@map("coordinates")
}

model PropertyAddress {
  id           String       @id @default(uuid())
  street       String
  zipCode      Int
  coordinateId String
  coordinate   Coordinate   @relation(fields: [coordinateId], references: [id])
  propertyId   String
  property     RentProperty @relation(fields: [propertyId], references: [id])
  cityId       String
  city         City         @relation(fields: [cityId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("property_addresses")
}

model RentProperty {
  id                String            @id @default(uuid())
  title             String
  description       String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  propertyAddresses PropertyAddress[]
  floorPlanImages   FloorPlanImage[]
  amenities         Amenity[]
  apartments        Apartment[]

  @@map("rent_properties")
}

model Apartment {
  id         String       @id @default(uuid())
  title      String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  propertyId String
  property   RentProperty @relation(fields: [propertyId], references: [id])
  structures Structure[]
  units      Unit[]

  @@map("apartments")
}

model Structure {
  id               String            @id @default(uuid())
  title            String
  apartmentId      String
  apartment        Apartment         @relation(fields: [apartmentId], references: [id])
  propertyFeatures PropertyFeature[]
  units            Unit[]
  floorPlanImages  FloorPlanImage[]
  amenities        Amenity[]

  @@map("structures")
}

model PropertyFeature {
  id             String    @id @default(uuid())
  bedRooms       Int
  bathRooms      Int
  squreFootage   Int
  lotSize        Int
  yearBuild      Int
  garage         Boolean
  garageCapacity Int
  swimingPool    Int
  firePlace      Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  structureId    String
  structure      Structure @relation(fields: [structureId], references: [id])

  @@map("property_features")
}

model Unit {
  id            String    @id @default(uuid())
  price         Float
  sqft          Float
  availableDate DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  apartmentId   String
  structureId   String
  apartment     Apartment @relation(fields: [apartmentId], references: [id])
  structure     Structure @relation(fields: [structureId], references: [id])

  @@map("units")
}

model FloorPlanImage {
  id          String       @id @default(uuid())
  link        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  propertyId  String
  property    RentProperty @relation(fields: [propertyId], references: [id])
  structureId String
  sturctureId Structure    @relation(fields: [structureId], references: [id])

  @@map("floor_plan_images")
}

model Amenity {
  id          String        @id @default(uuid())
  title       String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  propertyId  String?
  property    RentProperty? @relation(fields: [propertyId], references: [id])
  structureId String?
  sturctureId Structure?    @relation(fields: [structureId], references: [id])

  @@map("amenities")
}
