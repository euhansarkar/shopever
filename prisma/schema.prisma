generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid                      String               @id @default(uuid())
  id                       String               @unique
  role                     String
  password                 String
  email                    String               @unique
  needs_password_change    Boolean?             @default(true)
  password_change_at       DateTime?            @default(now())
  created_at               DateTime             @default(now())
  updated_at               DateTime             @updatedAt
  admin_id                 String?
  admin                    Admin?               @relation(fields: [admin_id], references: [uid])
  customer_id              String?
  customer                 Customer?            @relation(fields: [customer_id], references: [uid])
  user_coupon_condition    UserCouponCondition? @relation(fields: [user_coupon_condition_id], references: [id])
  user_coupon_condition_id String?

  @@map("users")
}

model ManagementDepartment {
  id         String   @id @default(uuid())
  title      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  admins     Admin[]

  @@map("management_departments")
}

model Customer {
  uid              String   @id @default(uuid())
  id               String   @unique
  name_id          String
  name             Name?    @relation(fields: [name_id], references: [id])
  country          String?
  gender           String?
  date_of_birth    String?
  contact_no       String?
  profile_image    String?
  users            User[]
  customer_address Address? @relation(fields: [address_Id], references: [id])
  address_Id       String?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  @@map("customers")
}

model Admin {
  uid                      String               @id @default(uuid())
  id                       String               @unique
  name_id                  String
  name                     Name?                @relation(fields: [name_id], references: [id])
  date_of_birth            String?
  gender                   String?
  blood_group              String?
  contact_no               String               @unique
  emergency_contact_no     String
  present_address          String
  permanent_address        String
  designation              String
  management_department_id String
  management_department    ManagementDepartment @relation(fields: [management_department_id], references: [id])
  profile_image            String?
  created_at               DateTime             @default(now())
  updated_at               DateTime             @updatedAt
  users                    User[]

  @@map("admins")
}

model Name {
  id          String     @id @default(uuid())
  first_name  String
  last_name   String
  middle_name String?
  admins      Admin[]
  customer    Customer[]
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  @@map("names")
}

model Category {
  id             String    @id @default(uuid())
  name           String
  description    String
  status         Boolean
  include_in_nav Boolean
  parent_id      String?
  position       Int
  Meta_SEO       MetaSEO?  @relation(fields: [meta_SEO_id], references: [id])
  meta_SEO_id    String?
  images         Image[]
  products       Product[]
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  @@map("categories")
}

model MetaSEO {
  id               String     @id @default(uuid())
  parent_id        String
  meta_title       String
  meta_description String
  url_key          String
  categories       Category[]
  keywords         Keyword[]
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt
  products         Product[]
  CMSs             CMS[]

  @@map("meta_SEOs")
}

model Keyword {
  id          String   @id @default(uuid())
  name        String
  Meta_SEO    MetaSEO? @relation(fields: [meta_SEO_id], references: [id])
  meta_SEO_id String?
  isDeleted   Boolean?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("keywords")
}

model Image {
  id          String    @id @default(uuid())
  image_url   String
  category    Category? @relation(fields: [category_id], references: [id])
  category_id String?
  product_id  String?
  isDeleted   Boolean?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  Varient     Varient?  @relation(fields: [varient_id], references: [id])
  varient_id  String?

  @@map("images")
}

model AttributeGroup {
  id         String      @id @default(uuid())
  group_name String
  products   Product[]
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  attributes Attribute[]

  @@map("attribute_groups")
}

model Attribute {
  id                  String            @id @default(uuid())
  attribute_name      String
  attribute_code      String
  type                String
  is_required         Boolean
  display_on_frontend Boolean
  is_filterable       Boolean
  sort_order          Int
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
  attribute_group     AttributeGroup    @relation(fields: [attribute_group_id], references: [id])
  attribute_group_id  String
  attribute_options   AttributeOption[]

  @@map("attributes")
}

model AttributeOption {
  id              String          @id @default(uuid())
  option_text     String
  attribute       Attribute?      @relation(fields: [attribute_id], references: [id])
  attribute_id    String
  is_deleted      Boolean?        @default(false)
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  varient_options VarientOption[]

  @@map("attribute_options")
}

model Product {
  id                 String          @id @default(uuid())
  name               String
  description        String
  sku                String          @unique
  manage_stock       Boolean         @default(false)
  stock_availability Boolean         @default(false)
  tax_class          Boolean         @default(false)
  attribute_group    AttributeGroup? @relation(fields: [attribute_group_id], references: [id])
  attribute_group_id String?
  category           Category?       @relation(fields: [category_id], references: [id])
  category_id        String?
  meta_SEO           MetaSEO         @relation(fields: [meta_SEO_id], references: [id])
  meta_SEO_id        String
  created_at         DateTime        @default(now())
  updated_at         DateTime        @updatedAt
  varients           Varient[]
  collections        Collection[]

  @@map("products")
}

model Varient {
  id              String          @id @default(uuid())
  sku             String          @unique
  qty             Int             @default(0)
  price           Float           @default(0)
  weight          Float           @default(0)
  status          Boolean         @default(false)
  visibility      Boolean         @default(false)
  product         Product?        @relation(fields: [product_id], references: [id])
  product_id      String?
  images          Image[]
  varient_options VarientOption[]
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt

  @@map("varients")
}

model VarientOption {
  id             String           @id @default(uuid())
  attribute_name String
  options        AttributeOption? @relation(fields: [option_id], references: [id])
  option_id      String?
  varients       Varient?         @relation(fields: [varient_id], references: [id])
  varient_id     String?

  @@map("varient_options")
}

// when user clicks on the addToCart button items will be added in the localStorage/cookie

// model CustomerAddress {
//   id           String      @id @default(uuid())
//   type         AddressType
//   addresses    Address     
//   created_at   DateTime    @default(now())
//   updated_at   DateTime    @updatedAt
//   Customer     Customer?   @relation(fields: [customer_Uid], references: [uid])
//   customer_Uid String 

//   @@map("customer_addresses")
// }

model Address {
  id                  String     @id @default(uuid())
  full_name           String
  telephone           String
  location_1          String
  location_2          String
  city                String
  province            String
  country             String
  postcode            String
  customer_address_id String?
  created_at          DateTime   @default(now())
  updated_at          DateTime   @updatedAt
  Customer            Customer[]

  @@map("addresses")
}

model Order {
  id                String           @id @default(uuid())
  order_number      Int              @unique @default(autoincrement())
  shipping_address  ShippingAddress  @relation(fields: [shippingAddressId], references: [id])
  billing_address   BillingAddress   @relation(fields: [billingAddressId], references: [id])
  payment_method    PaymentMethod    @relation(fields: [paymentMethodId], references: [id])
  shipping_method   ShippingMethod   @relation(fields: [shippingMethodId], references: [id])
  products          OrderedProduct[]
  shippingAddressId String
  billingAddressId  String
  paymentMethodId   String
  shippingMethodId  String
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt

  @@map("orders")
}

model ShippingAddress {
  id             String   @id @default(uuid())
  name           String
  phone_number_1 String
  phone_number_2 String
  country        String
  state          String
  city           String
  location       String
  orders         Order[]
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@map("shipping_addresses")
}

model BillingAddress {
  id             String   @id @default(uuid())
  name           String
  phone_number_1 String
  phone_number_2 String
  country        String
  state          String
  city           String
  location       String
  orders         Order[]
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@map("billing_addresses")
}

model VarientProduct {
  id                 String          @id @default(uuid())
  attribute_id       String
  attribute_name     String
  option_id          String
  varient_id         String
  orderedProduct     OrderedProduct? @relation(fields: [ordered_product_id], references: [id])
  ordered_product_id String?
  created_at         DateTime        @default(now())
  updated_at         DateTime        @updatedAt

  @@map("varient_products")
}

model OrderedProduct {
  id         String           @id @default(uuid())
  product_id String
  varients   VarientProduct[]
  orders     Order?           @relation(fields: [order_id], references: [id])
  order_id   String?
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt

  @@map("ordered_products")
}

model ShippingMethod {
  id          String   @id @default(uuid())
  method_name String
  method_code String
  cost        Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  orders      Order[]

  @@map("shipping_methods")
}

model PaymentMethod {
  id          String   @id @default(uuid())
  method_name String
  method_code String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  orders      Order[]

  @@map("payment_methods")
}

model Coupon {
  id                         String                @id @default(uuid())
  status                     Boolean
  description                String
  discount_amount            Int
  free_shipping              Boolean
  discount_type              String
  coupon                     String
  used_time                  Int
  condition                  String
  user_condition             String
  buyx_gety                  String
  max_uses_time_per_coupon   String
  max_uses_time_per_customer String
  start_date                 String
  end_date                   String
  target_coupon_products     TargetCouponProduct[]
  created_at                 DateTime              @default(now())
  updated_at                 DateTime              @updatedAt

  @@map("coupons")
}

model TargetCouponProduct {
  id              String          @id @default(uuid())
  maxQTy          Int
  coupon_products CouponProduct[]
  coupon          Coupon?         @relation(fields: [coupon_id], references: [id])
  coupon_id       String?
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt

  @@map("target_coupon_products")
}

model CouponProduct {
  id                       String               @id @default(uuid())
  key                      String
  operator                 String
  value                    String
  target_coupon_product    TargetCouponProduct? @relation(fields: [target_coupon_product_id], references: [id])
  target_coupon_product_id String?
  created_at               DateTime             @default(now())
  updated_at               DateTime             @updatedAt

  @@map("coupon_products")
}

model CouponCondition {
  id          String   @id @default(uuid())
  order_total Int
  order_qty   Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("coupon_conditions")
}

model RequiredCouponProduct {
  id         String   @id @default(uuid())
  key        String
  operator   String
  qty        Int
  value      Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("required_coupon_products")
}

model UserCouponCondition {
  id         String   @id @default(uuid())
  email      String
  parchased  Int
  users      User[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("user_coupon_conditions")
}

model CMS {
  id         String    @id @default(uuid())
  status     Boolean
  layout     CMSLayout
  name       String
  content    String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  MetaSEO    MetaSEO?  @relation(fields: [metaSEOId], references: [id])
  metaSEOId  String?

  @@map("CMSs")
}

model Collection {
  id              String      @id @default(uuid())
  collection_name String
  collection_code String
  description     String
  products        Product[]
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  ProductID       ProductID[]

  @@map("collections")
}

model ProductID {
  id           String     @id @default(uuid())
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String

  @@map("product_IDs")
}

model Store {
  id          String   @id @default(uuid())
  name        String   @default("evershop")
  description String
  logo        String
  phoneNumber String   @default("01234-567890")
  email       String   @default("evershop@gmail.com")
  country     String   @default("bangladesh")
  city        String   @default("rajshahi")
  postalCode  String   @default("6000")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum AddressType {
  home
  office
}

model LName {
  id   String @id @default(uuid())
  name String
}

enum CMSLayout {
  onColumn
  twoColumnsLeft
  twoColumnsRight
  threeColumns
}
